vim.o.background = "light"
local isDark = vim.o.background == "dark"
local c = {}
if isDark then
	c = {
		Front = "#D4D4D4",
		Back = "#1E1E1E",

		TabCurrent = "#1E1E1E",
		TabOther = "#2D2D2D",
		TabOutside = "#252526",

		LeftDark = "#252526",
		LeftMid = "#373737",
		LeftLight = "#636369",

		PopupFront = "#BBBBBB",
		PopupBack = "#272727",
		PopupHighlightBlue = "#004b72",
		PopupHighlightGray = "#343B41",

		SplitLight = "#898989",
		SplitDark = "#444444",
		SplitThumb = "#424242",

		CursorDarkDark = "#222222",
		CursorDark = "#51504F",
		CursorLight = "#AEAFAD",
		Selection = "#264F78",
		LineNumber = "#5A5A5A",

		DiffRedDark = "#4B1818",
		DiffRedLight = "#6F1313",
		DiffRedLightLight = "#FB0101",
		DiffGreenDark = "#373D29",
		DiffGreenLight = "#4B5632",
		SearchCurrent = "#515c6a",
		Search = "#613315",

		GitAdded = "#81b88b",
		GitModified = "#e2c08d",
		GitDeleted = "#c74e39",
		GitRenamed = "#73c991",
		GitUntracked = "#73c991",
		GitIgnored = "#8c8c8c",
		GitStageModified = "#e2c08d",
		GitStageDeleted = "#c74e39",
		GitConflicting = "#e4676b",
		GitSubmodule = "#8db9e2",

		Context = "#404040",
		ContextCurrent = "#707070",

		FoldBackground = "#202d39",

		-- Syntax colors
		Gray = "#808080",
		Violet = "#646695",
		Blue = "#569CD6",
		DarkBlue = "#223E55",
		MediumBlue = "#18a2fe",
		LightBlue = "#9CDCFE",
		Green = "#6A9955",
		BlueGreen = "#4EC9B0",
		LightGreen = "#B5CEA8",
		Red = "#F44747",
		Orange = "#CE9178",
		LightRed = "#D16969",
		YellowOrange = "#D7BA7D",
		Yellow = "#DCDCAA",
		Pink = "#C586C0",
	}
else
	c = {
		Front = "#343434",
		Back = "#FFFFFF",

		TabCurrent = "#0451A5",
		TabOther = "#CECECE",
		TabOutside = "#E8E8E8",

		LeftDark = "#F3F3F3",
		LeftMid = "#E5E5E5",
		LeftLight = "#F3F3F3",

		PopupFront = "#000000",
		PopupBack = "#F3F3F3",
		PopupHighlightBlue = "#0064c1",
		PopupHighlightGray = "#767676",

		SplitLight = "#EEEEEE",
		SplitDark = "#DDDDDD",
		SplitThumb = "#DFDFDF",

		CursorDarkDark = "#E5EBF1",
		CursorDark = "#C3C3C3",
		CursorLight = "#767676",
		Selection = "#ADD6FF",
		LineNumber = "#098658",

		DiffRedDark = "#FFCCCC",
		DiffRedLight = "#FFA3A3",
		DiffRedLightLight = "#FFCCCC",
		DiffGreenDark = "#DBE6C2",
		DiffGreenLight = "#EBF1DD",
		SearchCurrent = "#A8AC94",
		Search = "#F8C9AB",

		GitAdded = "#587c0c",
		GitModified = "#895503",
		GitDeleted = "#ad0707",
		GitRenamed = "#007100",
		GitUntracked = "#007100",
		GitIgnored = "#8e8e90",
		GitStageModified = "#895503",
		GitStageDeleted = "#ad0707",
		GitConflicting = "#ad0707",
		GitSubmodule = "#1258a7",

		Context = "#D2D2D2",
		ContextCurrent = "#929292",

		FoldBackground = "#e6f3ff",

		-- Syntax colors
		Gray = "#000000",
		Violet = "#000080",
		Blue = "#0000FF",
		DarkBlue = "#007ACC",
		LightBlue = "#0451A5",
		Green = "#008000",
		BlueGreen = "#16825D",
		LightGreen = "#098658",
		Red = "#FF0000",
		Orange = "#C72E0F",
		LightRed = "#A31515",
		YellowOrange = "#800000",
		Yellow = "#795E26",
		Pink = "#AF00DB",
	}
end

local groups = {
	ColorColumn = { bg = c.CursorDarkDark },
	Conceal = { fg = c.Front, bg = c.Back },
	Cursor = { reverse = true },
	lCursor = { link = "Cursor" },
	CursorIM = {},
	CursorColumn = { bg = c.CursorDarkDark },
	CursorLine = { bg = c.CursorDarkDark },
	Directory = { fg = c.Blue, bg = c.Back },
	DiffAdd = { bg = c.DiffGreenLight },
	DiffChange = { bg = c.DiffRedDark },
	DiffDelete = { bg = c.DiffRedLight },
	DiffText = { bg = c.DiffRedLight },
	EndOfBuffer = { fg = c.Back },
	TermCursor = { link = "Cursor" },
	TermCursorNC = {},
	ErrorMsg = { fg = c.Red },
	WinSeparator = {},
	Folded = { bg = c.FoldBackground },
	FoldColumn = { fg = c.LineNumber, bg = c.Back },
	SignColumn = { bg = c.Back },
	IncSearch = { fg = c.Back, bg = c.Front },
	Substitute = { link = "Search" },
	LineNr = { fg = c.LineNumber, bg = c.Back },
	LineNrAbove = { link = "LineNr" },
	LineNrBelow = { link = "LineNr" },
	CursorLineNr = { fg = c.PopupFront, bg = c.Back },
	CursorLineSign = {},
	CursorLineFold = {},
	MatchParen = { bg = c.CursorDark },
	ModeMsg = { fg = c.Front, bold = true },
	MsgArea = {},
	MsgSeparator = {},
	MoreMsg = { fg = c.Front, bg = c.LeftDark },
	NonText = { fg = (isDark and c.LineNumber or c.TabOther) },
	Normal = { fg = c.Front, bg = c.Back },
	NormalFloat = { bg = c.PopupBack },
	NormalNC = { link = "Normal" },
	Pmenu = { fg = c.PopupFront, bg = c.PopupBack },
	PmenuSel = { fg = isDark and c.PopupFront or c.Back, bg = c.PopupHighlightBlue },
	PmenuSbar = { bg = c.PopupHighlightGray },
	PmenuThumb = { bg = c.PopupFront },
	Question = { fg = c.Blue, bg = c.Back },
	QuickFixLine = { fg = c.Back, bg = c.Yellow, bold = true },
	Search = { bg = c.Search },
	SpecialKey = { fg = c.Blue },
	SpellBad = { fg = c.Red, bg = c.Back, undercurl = true, sp = c.Red },
	SpellCap = { fg = c.Red, bg = c.Back, undercurl = true, sp = c.Red },
	SpellLocal = { fg = c.Red, bg = c.Back, undercurl = true, sp = c.Red },
	SpellRare = { fg = c.Red, bg = c.Back, undercurl = true, sp = c.Red },
	StatusLine = { fg = c.Front, bg = c.LeftMid },
	StatusLineNC = { fg = c.Front, bg = c.LeftDark },
	TabLine = { fg = c.Front, bg = c.TabOther },
	TabLineFill = { fg = c.Front, bg = c.TabOutside },
	TabLineSel = { fg = c.Back, bg = c.TabCurrent },
	Title = { bold = true },
	Visual = { bg = c.Selection },
	VisualNOS = { bg = c.Selection },
	WarningMsg = { fg = c.Red, bg = c.Back, bold = true },
	Whitespace = { fg = isDark and c.LineNumber or c.TabOther },
	WildMenu = { bg = c.Selection },
	WinBar = {}, -- TODO
	WinBarNC = {}, --TODO
	Comment = { fg = c.Green, italic = true },
	Constant = { fg = c.Blue },
	String = { fg = c.Orange },
	Character = { fg = c.Orange },
	Number = { fg = c.LightGreen },
	Boolean = { fg = c.Blue },
	Float = { fg = c.LightGreen },
	Identifier = { fg = c.LightBlue },
	Function = { fg = c.Yellow },
	Statement = { fg = c.Pink },
	Conditional = { fg = c.Pink },
	Repeat = { fg = c.Pink },
	Label = { fg = c.Pink },
	Operator = { fg = c.Front },
	Keyword = { fg = c.Pink },
	Exception = { fg = c.Pink },
	PreProc = { fg = c.Pink },
	Include = { fg = c.Pink },
	Define = { fg = c.Pink },
	Macro = { fg = c.Pink },
	Type = { fg = c.Blue },
	StorageClass = { fg = c.Blue },
	Structure = { fg = c.Blue },
	Typedef = { fg = c.Blue },
	Special = { fg = c.YellowOrange },
	SpecialChar = { fg = c.Front },
	Tag = { fg = c.Front },
	Delimiter = { fg = c.Front },
	SpecialComment = { fg = c.Green },
	Debug = { fg = c.Front },
	Underlined = { underline = true },
	Ignore = { fg = c.Front },
	Error = { fg = c.Red, bg = c.Back, undercurl = true, sp = c.Red },
	Todo = { fg = c.YellowOrange, bg = c.Back, bold = true },
	LspReferenceText = { bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue },
	LspReferenceRead = { bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue },
	LspReferenceWrite = { bg = isDark and c.PopupHighlightGray or c.PopupHighlightLightBlue },
	LspCodeLens = { fg = c.Front },
	LspCodeLensSeparator = {},
	LspSignatureActiveParameter = {},
	DiagnosticError = { fg = c.Red },
	DiagnosticWarn = { fg = c.Yellow },
	DiagnosticInfo = { fg = c.Blue },
	DiagnosticHint = { fg = c.Blue },
	DiagnosticVirtualTextError = { link = "DiagnosticError" },
	DiagnosticVirtualTextWarn = { link = "DiagnosticWarn" },
	DiagnosticVirtualTextInfo = { link = "DiagnosticInfo" },
	DiagnosticVirtualTextHint = { link = "DiagnosticHint" },
	DiagnosticUnderlineError = { undercurl = true, sp = c.Red },
	DiagnosticUnderlineWarn = { undercurl = true, sp = c.Yellow },
	DiagnosticUnderlineInfo = { undercurl = true, sp = c.Blue },
	DiagnosticUnderlineHint = { undercurl = true, sp = c.Blue },
	DiagnosticFloatingError = { link = "DiagnosticError" },
	DiagnosticFloatingWarn = { link = "DiagnosticWarn" },
	DiagnosticFloatingInfo = { link = "DiagnosticInfo" },
	DiagnosticFloatingHint = { link = "DiagnosticHint" },
	DiagnosticSignError = { link = "DiagnosticError" },
	DiagnosticSignWarn = { link = "DiagnosticWarn" },
	DiagnosticSignInfo = { link = "DiagnosticInfo" },
	DiagnosticSignHint = { link = "DiagnosticHint" },
}

vim.cmd("hi clear")
vim.g.colors_name = "vscode"
vim.o.termguicolors = true
for group, settings in pairs(groups) do
	vim.api.nvim_set_hl(0, group, settings)
end

